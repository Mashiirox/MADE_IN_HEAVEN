import { Plugin } from 'vite';
import { readFileSync, readdirSync, writeFileSync, PathLike } from 'fs';
import { join, dirname } from 'path';
import { sync } from 'mkdirp';

const svgTitle = /<svg([^>+].*?)>/;

const clearHeightWidth = /(width|height)="([^>+].*?)"/g;

const hasViewBox = /(viewBox="[^>+].*?")/g;

const clearReturn = /(\r)|(\n)/g;

function findSvgFile(dir: PathLike): string[] {
  const svgRes = [];

  const dirents = readdirSync(dir, {
    withFileTypes: true,
  });

  for (const dirent of dirents) {
    if (dirent.isDirectory()) {
      svgRes.push(...findSvgFile(dir + dirent.name + '/'));
    } else {
      const svg = readFileSync(dir + dirent.name)
        .toString()
        .replace(clearReturn, '')
        .replace(svgTitle, (_$1, $2) => {
          let width = 0;
          let height = 0;
          let content = $2.replace(clearHeightWidth, (_s1, s2, s3) => {
            if (s2 === 'width') {
              width = s3;
            } else if (s2 === 'height') {
              height = s3;
            }
            return '';
          });
          if (!hasViewBox.test($2)) {
            content += `viewBox="0 0 ${width} ${height}"`;
          }
          return `<symbol id="${dirent.name.replace('.svg', '')}" ${content}>`;
        })
        .replace('</svg>', '</symbol>');
      svgRes.push(svg);
    }
  }

  return svgRes;
}

export const svgBuilder = (path: string): Plugin => {
  if (path === '') return;

  const res = findSvgFile(path);
  const result = `
    <svg width="0" height="0" class="hidden">
      ${res.join('')}
    </svg>
  `;

  const basePath = process.cwd();
  const pathName = '/dist/assets/sprite.svg';
  const spriteFileName = `// generated by build task, DO NOT modify this file\nexport default '${pathName}';\n`;
  const spriteFile = join(basePath, pathName);
  const variableFile = join(basePath, '/src/components/icon/svg-hash.ts');
  sync(dirname(spriteFile));
  writeFileSync(variableFile, spriteFileName);
  writeFileSync(spriteFile, result);
};
